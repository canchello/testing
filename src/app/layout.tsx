'use client'
import type { Metadata } from 'next'
import './globals.css'
import 'react-perfect-scrollbar/dist/css/styles.css'

import 'slick-carousel/slick/slick.css'
import 'slick-carousel/slick/slick-theme.css'

import { Proza_Libre } from 'next/font/google'
import { Toaster } from 'sonner'
import { Suspense, useEffect, useRef, useState } from 'react'
import LOCAL_STORAGE_CONSTANTS from '@/constants/localstorage'

// export const metadata: Metadata = {
//   title: 'Booking app',
//   description: 'Generated by create next app'
// }

const proza_libre = Proza_Libre({ weight: '400', subsets: ['latin'] })

// import Font Awesome CSS
import '@fortawesome/fontawesome-svg-core/styles.css'
import { config } from '@fortawesome/fontawesome-svg-core'
import SubscribedModal from '@/components/Modals/SubscribedModal'
import userStore from '@/stores/userStore'
import appStore from '@/stores/appStore'
import Loader from '@/components/common/Loader'
import ErrorBoundary from '@/components/common/ErrorBoundary'
import { usePathname } from 'next/navigation'
config.autoAddCss = false

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode
}>) {
  const { subscribedModal, setSubscribedModal, locationCords, setLocation }: any = appStore()
  const { user, fetchUserProfile, fetchingUser }: any = userStore()
  const [loading, setLoading] = useState(true) // Loading state
  const bodyRef = useRef<HTMLDivElement | null>(null)
  const pathname = usePathname()

  useEffect(() => {
    ;(async () => {
      const token = localStorage.getItem(LOCAL_STORAGE_CONSTANTS.AUTH_TOKEN)
      if (token && !user) {
        try {
          await fetchUserProfile(token)
        } catch (error) {
          console.error('Failed to fetch user profile:', error)
        }
      }
      setLoading(false) // Set loading to false after fetching data
    })()
  }, [])

  useEffect(() => {
    if (user && !locationCords) {
      if ('geolocation' in navigator) {
        // Retrieve latitude & longitude coordinates from `navigator.geolocation` Web API
        navigator.geolocation.getCurrentPosition(({ coords }) => {
          const { latitude, longitude } = coords
          setLocation({ latitude, longitude })
        })
      }
    }
  }, [user, locationCords])

  useEffect(() => {
    if (bodyRef.current) {
      bodyRef.current.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }, [pathname])

  return (
    <html lang='en'>
      <head>
        <title>Canchello | Booking</title>
      </head>
      <body className={`${proza_libre.className} antialiased`}>
        <div ref={bodyRef} className='h-screen overflow-auto'>
          <ErrorBoundary>
            {loading || fetchingUser || (!user && localStorage.getItem(LOCAL_STORAGE_CONSTANTS.AUTH_TOKEN)) ? (
              // Show a loading spinner or skeleton while loading
              <div className='flex items-center justify-center h-screen'>
                <span className='ml-4 text-lg font-medium text-gray-700'>
                  <Loader />
                </span>
              </div>
            ) : (
              <>
                <Suspense>{children}</Suspense>
                {subscribedModal && <SubscribedModal onClose={() => setSubscribedModal()} />}
                <Toaster position='top-center' richColors duration={2000} />
              </>
            )}
          </ErrorBoundary>
        </div>
      </body>
    </html>
  )
}
